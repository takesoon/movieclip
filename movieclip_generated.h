// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MOVIECLIP_MOVIECLIPFLAT_H_
#define FLATBUFFERS_GENERATED_MOVIECLIP_MOVIECLIPFLAT_H_

#include "flatbuffers/flatbuffers.h"


namespace MovieClipFlat {

struct ColorMatrix;
struct ActionColorTransform;
struct ActionTween;
struct Frame;
struct Layer;
struct ScriptDict;
struct LabelDict;
struct ElementType1;
struct ElementType2;
struct Element;
struct FileHead;
struct MovieClip;

MANUALLY_ALIGNED_STRUCT(4) ColorMatrix FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t brightness_;
  int32_t contrast_;
  int32_t saturation_;
  int32_t hue_;

 public:
  ColorMatrix(int32_t brightness, int32_t contrast, int32_t saturation, int32_t hue)
    : brightness_(flatbuffers::EndianScalar(brightness)), contrast_(flatbuffers::EndianScalar(contrast)), saturation_(flatbuffers::EndianScalar(saturation)), hue_(flatbuffers::EndianScalar(hue)) { }

  int32_t brightness() const { return flatbuffers::EndianScalar(brightness_); }
  int32_t contrast() const { return flatbuffers::EndianScalar(contrast_); }
  int32_t saturation() const { return flatbuffers::EndianScalar(saturation_); }
  int32_t hue() const { return flatbuffers::EndianScalar(hue_); }
};
STRUCT_END(ColorMatrix, 16);

MANUALLY_ALIGNED_STRUCT(4) ActionColorTransform FLATBUFFERS_FINAL_CLASS {
 private:
  float r_;
  float g_;
  float b_;
  float a_;
  int32_t offr_;
  int32_t offg_;
  int32_t offb_;
  int32_t offa_;
  ColorMatrix colorMatrix_;
  int32_t visible_;
  int32_t blend_;
  int32_t graphic_;
  int32_t loop_;
  int32_t first_;

 public:
  ActionColorTransform(float r, float g, float b, float a, int32_t offr, int32_t offg, int32_t offb, int32_t offa, const ColorMatrix &colorMatrix, int32_t visible, int32_t blend, int32_t graphic, int32_t loop, int32_t first)
    : r_(flatbuffers::EndianScalar(r)), g_(flatbuffers::EndianScalar(g)), b_(flatbuffers::EndianScalar(b)), a_(flatbuffers::EndianScalar(a)), offr_(flatbuffers::EndianScalar(offr)), offg_(flatbuffers::EndianScalar(offg)), offb_(flatbuffers::EndianScalar(offb)), offa_(flatbuffers::EndianScalar(offa)), colorMatrix_(colorMatrix), visible_(flatbuffers::EndianScalar(visible)), blend_(flatbuffers::EndianScalar(blend)), graphic_(flatbuffers::EndianScalar(graphic)), loop_(flatbuffers::EndianScalar(loop)), first_(flatbuffers::EndianScalar(first)) { }

  float r() const { return flatbuffers::EndianScalar(r_); }
  float g() const { return flatbuffers::EndianScalar(g_); }
  float b() const { return flatbuffers::EndianScalar(b_); }
  float a() const { return flatbuffers::EndianScalar(a_); }
  int32_t offr() const { return flatbuffers::EndianScalar(offr_); }
  int32_t offg() const { return flatbuffers::EndianScalar(offg_); }
  int32_t offb() const { return flatbuffers::EndianScalar(offb_); }
  int32_t offa() const { return flatbuffers::EndianScalar(offa_); }
  const ColorMatrix &colorMatrix() const { return colorMatrix_; }
  int32_t visible() const { return flatbuffers::EndianScalar(visible_); }
  int32_t blend() const { return flatbuffers::EndianScalar(blend_); }
  int32_t graphic() const { return flatbuffers::EndianScalar(graphic_); }
  int32_t loop() const { return flatbuffers::EndianScalar(loop_); }
  int32_t first() const { return flatbuffers::EndianScalar(first_); }
};
STRUCT_END(ActionColorTransform, 68);

struct ActionTween FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t rotate() const { return GetField<int32_t>(4, 0); }
  int32_t times() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::String *transformPoint() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *ease() const { return GetPointer<const flatbuffers::String *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* rotate */) &&
           VerifyField<int32_t>(verifier, 6 /* times */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* transformPoint */) &&
           verifier.Verify(transformPoint()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* ease */) &&
           verifier.Verify(ease()) &&
           verifier.EndTable();
  }
};

struct ActionTweenBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rotate(int32_t rotate) { fbb_.AddElement<int32_t>(4, rotate, 0); }
  void add_times(int32_t times) { fbb_.AddElement<int32_t>(6, times, 0); }
  void add_transformPoint(flatbuffers::Offset<flatbuffers::String> transformPoint) { fbb_.AddOffset(8, transformPoint); }
  void add_ease(flatbuffers::Offset<flatbuffers::String> ease) { fbb_.AddOffset(10, ease); }
  ActionTweenBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ActionTweenBuilder &operator=(const ActionTweenBuilder &);
  flatbuffers::Offset<ActionTween> Finish() {
    auto o = flatbuffers::Offset<ActionTween>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<ActionTween> CreateActionTween(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t rotate = 0,
   int32_t times = 0,
   flatbuffers::Offset<flatbuffers::String> transformPoint = 0,
   flatbuffers::Offset<flatbuffers::String> ease = 0) {
  ActionTweenBuilder builder_(_fbb);
  builder_.add_ease(ease);
  builder_.add_transformPoint(transformPoint);
  builder_.add_times(times);
  builder_.add_rotate(rotate);
  return builder_.Finish();
}

struct Frame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t frameIndex() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *insName() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *libName() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *sourceName() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *pos() const { return GetPointer<const flatbuffers::String *>(12); }
  const ActionColorTransform *colorTrans() const { return GetStruct<const ActionColorTransform *>(14); }
  const ActionTween *tween() const { return GetPointer<const ActionTween *>(16); }
  const flatbuffers::String *skew() const { return GetPointer<const flatbuffers::String *>(18); }
  const flatbuffers::String *scale() const { return GetPointer<const flatbuffers::String *>(20); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* frameIndex */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* insName */) &&
           verifier.Verify(insName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* libName */) &&
           verifier.Verify(libName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* sourceName */) &&
           verifier.Verify(sourceName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* pos */) &&
           verifier.Verify(pos()) &&
           VerifyField<ActionColorTransform>(verifier, 14 /* colorTrans */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* tween */) &&
           verifier.VerifyTable(tween()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* skew */) &&
           verifier.Verify(skew()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* scale */) &&
           verifier.Verify(scale()) &&
           verifier.EndTable();
  }
};

struct FrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frameIndex(int32_t frameIndex) { fbb_.AddElement<int32_t>(4, frameIndex, 0); }
  void add_insName(flatbuffers::Offset<flatbuffers::String> insName) { fbb_.AddOffset(6, insName); }
  void add_libName(flatbuffers::Offset<flatbuffers::String> libName) { fbb_.AddOffset(8, libName); }
  void add_sourceName(flatbuffers::Offset<flatbuffers::String> sourceName) { fbb_.AddOffset(10, sourceName); }
  void add_pos(flatbuffers::Offset<flatbuffers::String> pos) { fbb_.AddOffset(12, pos); }
  void add_colorTrans(const ActionColorTransform *colorTrans) { fbb_.AddStruct(14, colorTrans); }
  void add_tween(flatbuffers::Offset<ActionTween> tween) { fbb_.AddOffset(16, tween); }
  void add_skew(flatbuffers::Offset<flatbuffers::String> skew) { fbb_.AddOffset(18, skew); }
  void add_scale(flatbuffers::Offset<flatbuffers::String> scale) { fbb_.AddOffset(20, scale); }
  FrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FrameBuilder &operator=(const FrameBuilder &);
  flatbuffers::Offset<Frame> Finish() {
    auto o = flatbuffers::Offset<Frame>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<Frame> CreateFrame(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t frameIndex = 0,
   flatbuffers::Offset<flatbuffers::String> insName = 0,
   flatbuffers::Offset<flatbuffers::String> libName = 0,
   flatbuffers::Offset<flatbuffers::String> sourceName = 0,
   flatbuffers::Offset<flatbuffers::String> pos = 0,
   const ActionColorTransform *colorTrans = 0,
   flatbuffers::Offset<ActionTween> tween = 0,
   flatbuffers::Offset<flatbuffers::String> skew = 0,
   flatbuffers::Offset<flatbuffers::String> scale = 0) {
  FrameBuilder builder_(_fbb);
  builder_.add_scale(scale);
  builder_.add_skew(skew);
  builder_.add_tween(tween);
  builder_.add_colorTrans(colorTrans);
  builder_.add_pos(pos);
  builder_.add_sourceName(sourceName);
  builder_.add_libName(libName);
  builder_.add_insName(insName);
  builder_.add_frameIndex(frameIndex);
  return builder_.Finish();
}

struct Layer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<Frame>> *keysFrames() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Frame>> *>(4); }
  int32_t keyFrameCount() const { return GetField<int32_t>(6, 0); }
  int32_t frameCount() const { return GetField<int32_t>(8, 0); }
  int32_t mask() const { return GetField<int32_t>(10, 0); }
  int32_t maskDepth() const { return GetField<int32_t>(12, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* keysFrames */) &&
           verifier.Verify(keysFrames()) &&
           verifier.VerifyVectorOfTables(keysFrames()) &&
           VerifyField<int32_t>(verifier, 6 /* keyFrameCount */) &&
           VerifyField<int32_t>(verifier, 8 /* frameCount */) &&
           VerifyField<int32_t>(verifier, 10 /* mask */) &&
           VerifyField<int32_t>(verifier, 12 /* maskDepth */) &&
           verifier.EndTable();
  }
};

struct LayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_keysFrames(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Frame>>> keysFrames) { fbb_.AddOffset(4, keysFrames); }
  void add_keyFrameCount(int32_t keyFrameCount) { fbb_.AddElement<int32_t>(6, keyFrameCount, 0); }
  void add_frameCount(int32_t frameCount) { fbb_.AddElement<int32_t>(8, frameCount, 0); }
  void add_mask(int32_t mask) { fbb_.AddElement<int32_t>(10, mask, 0); }
  void add_maskDepth(int32_t maskDepth) { fbb_.AddElement<int32_t>(12, maskDepth, 0); }
  LayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LayerBuilder &operator=(const LayerBuilder &);
  flatbuffers::Offset<Layer> Finish() {
    auto o = flatbuffers::Offset<Layer>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<Layer> CreateLayer(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Frame>>> keysFrames = 0,
   int32_t keyFrameCount = 0,
   int32_t frameCount = 0,
   int32_t mask = 0,
   int32_t maskDepth = 0) {
  LayerBuilder builder_(_fbb);
  builder_.add_maskDepth(maskDepth);
  builder_.add_mask(mask);
  builder_.add_frameCount(frameCount);
  builder_.add_keyFrameCount(keyFrameCount);
  builder_.add_keysFrames(keysFrames);
  return builder_.Finish();
}

struct ScriptDict FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *source() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *lang() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *trigger() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* source */) &&
           verifier.Verify(source()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* lang */) &&
           verifier.Verify(lang()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* trigger */) &&
           verifier.Verify(trigger()) &&
           verifier.EndTable();
  }
};

struct ScriptDictBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_source(flatbuffers::Offset<flatbuffers::String> source) { fbb_.AddOffset(4, source); }
  void add_lang(flatbuffers::Offset<flatbuffers::String> lang) { fbb_.AddOffset(6, lang); }
  void add_trigger(flatbuffers::Offset<flatbuffers::String> trigger) { fbb_.AddOffset(8, trigger); }
  ScriptDictBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ScriptDictBuilder &operator=(const ScriptDictBuilder &);
  flatbuffers::Offset<ScriptDict> Finish() {
    auto o = flatbuffers::Offset<ScriptDict>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<ScriptDict> CreateScriptDict(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> source = 0,
   flatbuffers::Offset<flatbuffers::String> lang = 0,
   flatbuffers::Offset<flatbuffers::String> trigger = 0) {
  ScriptDictBuilder builder_(_fbb);
  builder_.add_trigger(trigger);
  builder_.add_lang(lang);
  builder_.add_source(source);
  return builder_.Finish();
}

struct LabelDict FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *source() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* source */) &&
           verifier.Verify(source()) &&
           verifier.EndTable();
  }
};

struct LabelDictBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_source(flatbuffers::Offset<flatbuffers::String> source) { fbb_.AddOffset(4, source); }
  LabelDictBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LabelDictBuilder &operator=(const LabelDictBuilder &);
  flatbuffers::Offset<LabelDict> Finish() {
    auto o = flatbuffers::Offset<LabelDict>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<LabelDict> CreateLabelDict(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> source = 0) {
  LabelDictBuilder builder_(_fbb);
  builder_.add_source(source);
  return builder_.Finish();
}

struct ElementType1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t type() const { return GetField<int32_t>(4, 0); }
  int32_t frameRate() const { return GetField<int32_t>(6, 0); }
  int32_t layerCount() const { return GetField<int32_t>(8, 0); }
  int32_t frameCount() const { return GetField<int32_t>(10, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<Layer>> *layers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Layer>> *>(12); }
  const flatbuffers::Vector<flatbuffers::Offset<LabelDict>> *labelDict() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<LabelDict>> *>(14); }
  const flatbuffers::Vector<flatbuffers::Offset<ScriptDict>> *scriptDict() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ScriptDict>> *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* type */) &&
           VerifyField<int32_t>(verifier, 6 /* frameRate */) &&
           VerifyField<int32_t>(verifier, 8 /* layerCount */) &&
           VerifyField<int32_t>(verifier, 10 /* frameCount */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* layers */) &&
           verifier.Verify(layers()) &&
           verifier.VerifyVectorOfTables(layers()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* labelDict */) &&
           verifier.Verify(labelDict()) &&
           verifier.VerifyVectorOfTables(labelDict()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* scriptDict */) &&
           verifier.Verify(scriptDict()) &&
           verifier.VerifyVectorOfTables(scriptDict()) &&
           verifier.EndTable();
  }
};

struct ElementType1Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) { fbb_.AddElement<int32_t>(4, type, 0); }
  void add_frameRate(int32_t frameRate) { fbb_.AddElement<int32_t>(6, frameRate, 0); }
  void add_layerCount(int32_t layerCount) { fbb_.AddElement<int32_t>(8, layerCount, 0); }
  void add_frameCount(int32_t frameCount) { fbb_.AddElement<int32_t>(10, frameCount, 0); }
  void add_layers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Layer>>> layers) { fbb_.AddOffset(12, layers); }
  void add_labelDict(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<LabelDict>>> labelDict) { fbb_.AddOffset(14, labelDict); }
  void add_scriptDict(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ScriptDict>>> scriptDict) { fbb_.AddOffset(16, scriptDict); }
  ElementType1Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ElementType1Builder &operator=(const ElementType1Builder &);
  flatbuffers::Offset<ElementType1> Finish() {
    auto o = flatbuffers::Offset<ElementType1>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<ElementType1> CreateElementType1(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t type = 0,
   int32_t frameRate = 0,
   int32_t layerCount = 0,
   int32_t frameCount = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Layer>>> layers = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<LabelDict>>> labelDict = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ScriptDict>>> scriptDict = 0) {
  ElementType1Builder builder_(_fbb);
  builder_.add_scriptDict(scriptDict);
  builder_.add_labelDict(labelDict);
  builder_.add_layers(layers);
  builder_.add_frameCount(frameCount);
  builder_.add_layerCount(layerCount);
  builder_.add_frameRate(frameRate);
  builder_.add_type(type);
  return builder_.Finish();
}

struct ElementType2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t type() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *pos() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *insName() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *sourceName() const { return GetPointer<const flatbuffers::String *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* pos */) &&
           verifier.Verify(pos()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* insName */) &&
           verifier.Verify(insName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* sourceName */) &&
           verifier.Verify(sourceName()) &&
           verifier.EndTable();
  }
};

struct ElementType2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) { fbb_.AddElement<int32_t>(4, type, 0); }
  void add_pos(flatbuffers::Offset<flatbuffers::String> pos) { fbb_.AddOffset(6, pos); }
  void add_insName(flatbuffers::Offset<flatbuffers::String> insName) { fbb_.AddOffset(8, insName); }
  void add_sourceName(flatbuffers::Offset<flatbuffers::String> sourceName) { fbb_.AddOffset(10, sourceName); }
  ElementType2Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ElementType2Builder &operator=(const ElementType2Builder &);
  flatbuffers::Offset<ElementType2> Finish() {
    auto o = flatbuffers::Offset<ElementType2>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<ElementType2> CreateElementType2(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t type = 0,
   flatbuffers::Offset<flatbuffers::String> pos = 0,
   flatbuffers::Offset<flatbuffers::String> insName = 0,
   flatbuffers::Offset<flatbuffers::String> sourceName = 0) {
  ElementType2Builder builder_(_fbb);
  builder_.add_sourceName(sourceName);
  builder_.add_insName(insName);
  builder_.add_pos(pos);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Element FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const ElementType1 *eletype1() const { return GetPointer<const ElementType1 *>(4); }
  const ElementType2 *eletype2() const { return GetPointer<const ElementType2 *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* eletype1 */) &&
           verifier.VerifyTable(eletype1()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* eletype2 */) &&
           verifier.VerifyTable(eletype2()) &&
           verifier.EndTable();
  }
};

struct ElementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_eletype1(flatbuffers::Offset<ElementType1> eletype1) { fbb_.AddOffset(4, eletype1); }
  void add_eletype2(flatbuffers::Offset<ElementType2> eletype2) { fbb_.AddOffset(6, eletype2); }
  ElementBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ElementBuilder &operator=(const ElementBuilder &);
  flatbuffers::Offset<Element> Finish() {
    auto o = flatbuffers::Offset<Element>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Element> CreateElement(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ElementType1> eletype1 = 0,
   flatbuffers::Offset<ElementType2> eletype2 = 0) {
  ElementBuilder builder_(_fbb);
  builder_.add_eletype2(eletype2);
  builder_.add_eletype1(eletype1);
  return builder_.Finish();
}

struct FileHead FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t pix() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *filename() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *fileUpdateTime() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *fileVersion() const { return GetPointer<const flatbuffers::String *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* pix */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* filename */) &&
           verifier.Verify(filename()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* fileUpdateTime */) &&
           verifier.Verify(fileUpdateTime()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* fileVersion */) &&
           verifier.Verify(fileVersion()) &&
           verifier.EndTable();
  }
};

struct FileHeadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pix(int32_t pix) { fbb_.AddElement<int32_t>(4, pix, 0); }
  void add_filename(flatbuffers::Offset<flatbuffers::String> filename) { fbb_.AddOffset(6, filename); }
  void add_fileUpdateTime(flatbuffers::Offset<flatbuffers::String> fileUpdateTime) { fbb_.AddOffset(8, fileUpdateTime); }
  void add_fileVersion(flatbuffers::Offset<flatbuffers::String> fileVersion) { fbb_.AddOffset(10, fileVersion); }
  FileHeadBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileHeadBuilder &operator=(const FileHeadBuilder &);
  flatbuffers::Offset<FileHead> Finish() {
    auto o = flatbuffers::Offset<FileHead>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<FileHead> CreateFileHead(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t pix = 0,
   flatbuffers::Offset<flatbuffers::String> filename = 0,
   flatbuffers::Offset<flatbuffers::String> fileUpdateTime = 0,
   flatbuffers::Offset<flatbuffers::String> fileVersion = 0) {
  FileHeadBuilder builder_(_fbb);
  builder_.add_fileVersion(fileVersion);
  builder_.add_fileUpdateTime(fileUpdateTime);
  builder_.add_filename(filename);
  builder_.add_pix(pix);
  return builder_.Finish();
}

struct MovieClip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const FileHead *fileInfo() const { return GetPointer<const FileHead *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<Element>> *elements() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Element>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* fileInfo */) &&
           verifier.VerifyTable(fileInfo()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* elements */) &&
           verifier.Verify(elements()) &&
           verifier.VerifyVectorOfTables(elements()) &&
           verifier.EndTable();
  }
};

struct MovieClipBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fileInfo(flatbuffers::Offset<FileHead> fileInfo) { fbb_.AddOffset(4, fileInfo); }
  void add_elements(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Element>>> elements) { fbb_.AddOffset(6, elements); }
  MovieClipBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MovieClipBuilder &operator=(const MovieClipBuilder &);
  flatbuffers::Offset<MovieClip> Finish() {
    auto o = flatbuffers::Offset<MovieClip>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MovieClip> CreateMovieClip(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<FileHead> fileInfo = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Element>>> elements = 0) {
  MovieClipBuilder builder_(_fbb);
  builder_.add_elements(elements);
  builder_.add_fileInfo(fileInfo);
  return builder_.Finish();
}

inline const MovieClip *GetMovieClip(const void *buf) { return flatbuffers::GetRoot<MovieClip>(buf); }

inline bool VerifyMovieClipBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<MovieClip>(); }

inline void FinishMovieClipBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<MovieClip> root) { fbb.Finish(root); }

}  // namespace MovieClipFlat

#endif  // FLATBUFFERS_GENERATED_MOVIECLIP_MOVIECLIPFLAT_H_
